/*
https://www.youtube.com/watch?v=0vVofAhAYjc&ab_channel=takeUforward

https://practice.geeksforgeeks.org/problems/distance-from-the-source-bellman-ford-algorithm/1
https://www.geeksforgeeks.org/detect-negative-cycle-graph-bellman-ford/
*/


class Solution {
  public:
    /*  Function to implement Bellman Ford
    *   edges: vector of vectors which represents the graph
    *   S: source vertex to start traversing graph with
    *   V: number of vertices
    */
    bool bellman_ford(int V, vector<vector<int>>& edges, int S) {
        vector<int> dist(V, 1e8);
        dist[S] = 0;
        for(int i = 0; i < V - 1; i++){
            for(auto j : edges){
                int u = j[0];
                int v = j[1];
                int wt = j[2];
                if(dist[u] != 1e8 and dist[u] + wt < dist[v]){
                    dist[v] = dist[u] + wt;
                }
            }
        }
        
        for(auto j : edges){
            int u = j[0];
            int v = j[1];
            int wt = j[2];
            if(dist[u] != 1e8 and dist[u] + wt < dist[v]){
                    return true;
            }
        }
        return false;
    }
};
