
/*
https://www.youtube.com/watch?v=rKo9MPe0c5A&list=PLDdcY4olLQk066ysRibhoGd3UzGr0XSQG&index=6&ab_channel=Yogesh%26Shailesh%28CodeLibrary%29
https://practice.geeksforgeeks.org/problems/rat-in-a-maze-problem/1
*/

vector<string> v;

class Solution{
    public:
    void dfs(int i, int j, string s, vector<vector<int>> &m, int n, vector<vector<int> > &vis){
        if(i < 0 or j < 0 or i >= n or j >= n)
            return;
        if(m[i][j] == 0 or vis[i][j] == 1)
            return;
        if(i == n - 1 and j == n - 1){
            v.push_back(s);
            return;
        }
        vis[i][j] = 1;
        dfs(i - 1, j, s + 'U', m, n, vis);
        dfs(i + 1, j, s + 'D', m, n, vis);
        dfs(i, j - 1, s + 'L', m, n, vis);
        dfs(i, j + 1, s + 'R', m, n, vis);
        vis[i][j] = 0;
            
    }
    vector<string> findPath(vector<vector<int>> &m, int n) {
        v.clear();
        vector<vector<int> > vis(n , vector<int>(n)); 
        if(m[0][0] == 0 or m[n - 1][n - 1] == 0)
            return v;
        string s = "";
        dfs(0, 0 , s, m, n, vis);
        sort(v.begin(), v.end());
        return v;
    }
};
