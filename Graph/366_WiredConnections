
/*
https://leetcode.com/problems/number-of-operations-to-make-network-connected/submissions/
https://www.youtube.com/watch?v=gEK7eHce88g&list=PLDdcY4olLQk066ysRibhoGd3UzGr0XSQG&index=9&ab_channel=Yogesh%26Shailesh%28CodeLibrary%29
*/
class Solution {
public:
    void dfs(int i , vector<int> g[], vector<int> &vis){
        vis[i] = 1;
        for(auto x:g[i]){
            if(!vis[x]){
                dfs(x, g, vis);
            }
        }
    }
    int makeConnected(int n, vector<vector<int>>& edges) {
        vector<int> g[n];
        int m = edges.size();
        if(m < n - 1)   return -1;
        for(int i = 0; i < edges.size(); i++){
            g[edges[i][0]].push_back(edges[i][1]);
            g[edges[i][1]].push_back(edges[i][0]);
        }
        vector<int> vis(n,0);
        int c = 0;
        for(int i = 0; i < n; i++){
            if(!vis[i]){
                c++;
                dfs(i, g, vis);
            }
        }
    return c-1;
    }
};
