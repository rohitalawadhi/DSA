/*
https://www.youtube.com/watch?v=8GCanpcONgQ&ab_channel=CuriousChahar
https://leetcode.com/problems/combination-sum/description/
*/

class Solution {
public:
    vector<vector<int> > ans;
    void helper(vector<int> &candidates, int target, int i, int currSum,  vector<int> temp){
        if(currSum > target)
            return;
        if(i == candidates.size()){
            if(currSum == target)
                ans.push_back(temp);
            return;
        }
        currSum += candidates[i];
        temp.push_back(candidates[i]);
        helper(candidates, target, i, currSum, temp);
        currSum -= candidates[i];
        temp.pop_back();

        helper(candidates, target, i + 1, currSum, temp);
        

    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<int> temp;
        helper(candidates, target, 0, 0, temp);
        return ans;
    }
};
