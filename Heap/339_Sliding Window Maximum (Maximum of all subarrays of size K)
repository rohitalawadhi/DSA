/*

https://www.geeksforgeeks.org/sliding-window-maximum-maximum-of-all-subarrays-of-size-k/
*/

#include <bits/stdc++.h>
using namespace std;

// Function to find the maximum element in each sliding
// window of size k
vector<int> maxSlidingWindow(vector<int>& arr, int k)
{
    vector<int> ans;
    priority_queue<pair<int, int> > heap;
    for(int i = 0; i < k ; i++)
        heap.push({arr[i], i});
    ans.push_back(heap.top().first);
    for(int i = k ; i < arr.size(); i++){
        heap.push({arr[i], i});
        while(heap.top().second <= i - k)
            heap.pop();
        ans.push_back(heap.top().first);
    }
    return ans;
}

int main()
{
	vector<int> arr = { 2, 3, 7, 9, 5, 1, 6, 4, 3 };
	int k = 3;

	// Find the maximum element in each sliding window of
	// size k
	vector<int> result = maxSlidingWindow(arr, k);

	// Print the results
	for (auto i : result)
		cout << i << " ";

	return 0;
}
