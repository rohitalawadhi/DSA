// https://www.youtube.com/watch?v=8C7K6m_h-Og&ab_channel=GeeksforGeeksPractice
// https://practice.geeksforgeeks.org/problems/optimal-binary-search-tree2214/1?utm_source=geeksforgeeks&utm_medium=ml_article_practice_tab&utm_campaign=article_practice_tab

class Solution{
    public:
    int optimalSearchTree(int keys[], int freq[], int n)
    {
        pair<int, int> f[n];
        for(int i = 0; i < n ; i++)
            f[i] = {keys[i], freq[i]};
        sort(f, f + n);
        int P[n];
        P[0] = f[0].second;
        for(int i = 1; i < n; i++)
            P[i] = P[i - 1] + f[i].second;
        
        int dp[n][n];
        for(int i = 0; i < n; i++)
            dp[i][i] = f[i].second;
            
        for(int i = n - 1; i >= 0; i--){
            for(int j = i + 1; j < n; j++){
                dp[i][j] = INT_MAX;
                for(int k = i; k <= j; k++){
                    int leftSubTree = (k > i ? dp[i][k - 1] : 0);
                    int rightSubTree = (k < j ? dp[k + 1][j] : 0);
                    dp[i][j] = min(dp[i][j], leftSubTree + rightSubTree + P[j] - (i > 0 ? P[i - 1] : 0));
                }
            }
        }
        return dp[0][n - 1];
    }
};
