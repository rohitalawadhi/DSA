// https://practice.geeksforgeeks.org/problems/0-1-knapsack-problem0945/1

class Solution
{
    public:
    int solve(int capacity, int *weight, int * val, int n, vector<vector<int>> &dp)
    {
        if(n==0)
        {
            if(weight[0] <= capacity)
            {
                return val[0];
            }
            else
                return 0;
        }
        if(dp[n][capacity] != -1)
        {
            return dp[n][capacity]; 
        }
        int include{0}, exclude;
        if(weight[n] <= capacity)
        include = val[n] + solve(capacity - weight[n], weight, val, n-1, dp);
        exclude = solve(capacity, weight, val, n-1, dp);
        dp[n][capacity] = max(include, exclude);
        return dp[n][capacity];
    }
    //Function to return max value that can be put in knapsack of capacity W.
    int knapSack(int W, int wt[], int val[], int n) 
    {
        vector<vector<int>> dp(n , vector<int>(W+1, -1));
        return solve(W, wt, val, n-1, dp);
    }
};
