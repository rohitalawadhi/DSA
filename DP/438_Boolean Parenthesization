// https://www.youtube.com/watch?v=MM7fXopgyjw&ab_channel=takeUforward
// https://practice.geeksforgeeks.org/problems/boolean-parenthesization5610/1

class Solution{
public:
    //int mod = 1000000007;
    int mod = 1003;
    long long f(int i, int j, int isTrue, string & exp, vector<vector<vector<long long> > > & dp){
        if( i > j)
            return 0;
        
        if(i == j){
            if(isTrue)
                return exp[i] == 'T';
            else
                return exp[i] == 'F';
        }
        
        if(dp[i][j][isTrue] != -1)
            return dp[i][j][isTrue];
            
        long long ways = 0;
        for(int ind = i + 1; ind <= j - 1; ind += 2){
            long long lT = f(i, ind - 1, 1, exp, dp) %mod;
            long long lF = f(i, ind - 1, 0, exp, dp) %mod;
            long long rT = f(ind + 1, j, 1, exp, dp) %mod;
            long long rF = f(ind + 1, j, 0, exp, dp) %mod;
            if(exp[ind] == '&'){
                if(isTrue)
                    ways = ( ways + (rT * lT) % mod) % mod;
                else
                    ways = ( ways + (rT * lF) % mod + (rF * lT) % mod + (rF * lF) % mod ) % mod;
            }
            else if(exp[ind] == '|'){
                if(isTrue){
                    ways = (ways + ( lT * rT) % mod + (lT * rF) % mod + (lF * rT) % mod ) % mod;
                }
                
                else{
                    ways = (ways + (rF * lF) % mod) % mod;
                }
                
            }
            else{
                if(isTrue)
                    ways = (ways + (lT * rF) % mod + (lF * rT) % mod ) % mod;
                else
                    ways = (ways + (lT * rT) % mod + (lF * rF) % mod ) % mod;
                }
            }
            return dp[i][j][isTrue] = ways;
    }
    int countWays(int N, string S){
        vector<vector<vector<long long> > > dp(N, vector<vector<long long> >(N, vector<long long >(2, -1)));
        return int(f(0, S.size() - 1, 1, S, dp));
    }
};
