// https://practice.geeksforgeeks.org/problems/normal-bst-to-balanced-bst/1?utm_source=geeksforgeeks&utm_medium=article_practice_tab&utm_campaign=article_practice_tab
// https://www.youtube.com/watch?v=8AnntMKIWlQ&ab_channel=Yogesh%26Shailesh%28CodeLibrary%29
class Solution{
  public:
    // The given root is the root of the Binary Tree
    // Return the root of the generated BST
    void inorder_tree(Node * root, vector<int> &v){
        if(!root)
            return;
        inorder_tree(root->left, v);
        v.push_back(root->data);
        inorder_tree(root->right, v);
    }
    void inorder_bst(Node * root, vector<int> &v, int &i){
        if(!root)
            return;
        inorder_bst(root->left, v, i);
        root->data = v[i];
        i++;
        inorder_bst(root->right, v, i);
    }
    Node *binaryTreeToBST (Node *root)
    {
         vector<int> v;
        inorder_tree(root, v);
        sort(v.begin(), v.end());
        int i = 0;
        inorder_bst(root, v, i);
        return root;
    }
};
