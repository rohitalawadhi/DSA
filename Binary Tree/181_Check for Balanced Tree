// https://practice.geeksforgeeks.org/problems/check-for-balanced-tree/1
// https://github.com/viren-sureja/Love-Babbar-450/blob/master/06_binary_trees/14_check_if_tree_is_balance_or_not.cpp
class Solution{
    public:
    int height(Node* root) {
        if (!root) return 0;
    
        int lHeight = height(root->left);
        int rHeight = height(root->right);
    
        return max(lHeight, rHeight) + 1;
    }
    //Function to check whether a binary tree is balanced or not.
    bool isBalanced(Node *root)
    {
        int lh; /* for height of left subtree */
        int rh; /* for height of right subtree */
    
        /* If tree is empty then return true */
        if (root == NULL)
            return 1;
    
        /* Get the height of left and right sub trees */
        lh = height(root->left);
        rh = height(root->right);
    
        if (abs(lh - rh) <= 1 && isBalanced(root->left) && isBalanced(root->right))
            return 1;
    
        /* If we reach here then
        tree is not height-balanced */
        return 0;
    }
};
